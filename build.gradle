plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.newzet'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // mockito 추가
    testImplementation "org.mockito:mockito-core:5.11.0"

    // redis 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.43.0'
    testImplementation 'org.testcontainers:testcontainers:1.20.5'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.5'

    // querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        '**/*Application*',
                        '**/Q*.class',
                        '**/*Exception.class'
                ])
            })
    )

    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        '**/*Application*',
                        '**/Q*.class',
                        '**/*Exception.class',
                        '**/config/**',
                ])
            })
    )

    violationRules {
        rule {
            enabled = true;
            element = 'CLASS'

//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}
